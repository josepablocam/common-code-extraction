{"nbformat_minor": 1, "nbformat": 4, "metadata": {"kernelspec": {"name": "python3", "language": "python", "display_name": "Python 3"}, "language_info": {"pygments_lexer": "ipython3", "version": "3.6.4", "name": "python", "file_extension": ".py", "nbconvert_exporter": "python", "codemirror_mode": {"version": 3, "name": "ipython"}, "mimetype": "text/x-python"}}, "cells": [{"source": ["**Numpy**\n", "* Numpy stands for Numerical python\n", "* Numpy is the most basic and most useful package used commonly in machine learning\n", "* Numpy handles multideminsional array objects\n", "* Using Numpy we can perform mathematical operations on arrays easily.\n", "* To work on the machine learning, understanding and having the hands on work on numpy is most important\n", "* Another powerful package called  'Pandas' which is used for data manipulation has built on top of numpy"], "cell_type": "markdown", "metadata": {"_uuid": "169bb6677e309e4be0c93eefc5609fe95cec2418", "_cell_guid": "b8a40c0b-d2bb-460f-8477-a2ac950ee43f"}}, {"outputs": [], "source": ["# Import Numpy package to use its built in functions\n", "# Here np is an alias name for Numpy. so going forward we use np wherever we want tocall any function or attribute from Numpy package \n", "import numpy as np"], "execution_count": null, "cell_type": "code", "metadata": {"collapsed": true, "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5", "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19"}}, {"source": [" **Creating Numpy array**\n", " * Numpy array can be created in many ways\n", " * Very common way to create nd array using numy is as follows"], "cell_type": "markdown", "metadata": {"_uuid": "f138818ea611a6a5f3faade6b98938f5d64ec62b", "_cell_guid": "28714464-4a73-40e0-a686-ba0bbfc1d784"}}, {"outputs": [], "source": ["    List = [1,2,3,4,5,6,7,8,9] \n", "    arr = np.array(List)\n", "    print(arr)\n", "    print(type(arr))"], "execution_count": null, "cell_type": "code", "metadata": {"_uuid": "3567fd13dfca86cfb4bd008f9bfa8698bacf80c8", "_cell_guid": "e121afe3-0e83-43f6-8f78-d00708d31e8c"}}, {"outputs": [], "source": ["# To get the number of elements\n", "arr.size"], "execution_count": null, "cell_type": "code", "metadata": {}}, {"outputs": [], "source": ["#create a list comprising numbers from 0 to 9\n", "list_of_values_using_arange = np.arange(0,10)\n", "print(list_of_values_using_arange)"], "execution_count": null, "cell_type": "code", "metadata": {"_uuid": "c22c2914823188efa09919ce3753b7f7447add38", "_cell_guid": "0fd6ddf5-22bf-45b3-96ba-367814cdb8eb"}}, {"outputs": [], "source": ["#create a list comprising numbers from 0 to 9\n", "list_of_values_using_range = range(0,10)\n", "print(list_of_values_using_range)\n", "\n", "list_of_values_using_range = list(range(0,10))\n", "print(list_of_values_using_range)"], "execution_count": null, "cell_type": "code", "metadata": {"_uuid": "36b8cf6270e26769f5e43e2104c961a7bee57490", "_cell_guid": "3e77e2d1-314e-4eda-8b83-483f0c501827"}}, {"outputs": [], "source": ["#converting integers to string - this style of handling lists is known as list comprehension.\n", "#List comprehension offers a versatile way to handle list manipulations tasks easily.\n", "[str(num) for num in  list_of_values_using_range]"], "execution_count": null, "cell_type": "code", "metadata": {"_uuid": "e56820e302602d2f29f41bbd9919478c3b66c032", "_cell_guid": "fa92e891-f198-4fa6-95ae-a1f8ccd61df2"}}, {"outputs": [], "source": ["#creating arrays\n", "np.zeros(10, dtype=int)"], "execution_count": null, "cell_type": "code", "metadata": {"_uuid": "0740d3ba2bc5aaa039cc2b0cfd67fc93703f713c", "_cell_guid": "6bfc4be8-3ed8-454b-845d-0074866c2373"}}, {"outputs": [], "source": ["#creating a 3 row x 5 column matrix\n", "np.ones((3,5), dtype=int)"], "execution_count": null, "cell_type": "code", "metadata": {"_uuid": "1a0a2939cf6d3960c1e4aad5118868dc850031f2", "_cell_guid": "aedbcb28-e7e6-49d9-a335-54e2b7040508"}}, {"outputs": [], "source": ["#creating a matrix with a predefined value\n", "# Here 5 will be displayed in 3x5 matrix form\n", "np.full((3,5), 5)"], "execution_count": null, "cell_type": "code", "metadata": {"_uuid": "c76f45c574571de53f60b2533fb14e2dd3c2431a", "_cell_guid": "a716ebe2-f49b-4b05-b13f-df1faddeb9b8"}}, {"outputs": [], "source": ["#create an array with a set sequence\n", "# display values from 1 to 9 with an interval of 2 i.e, step by 2\n", "np.arange(1,10,2)"], "execution_count": null, "cell_type": "code", "metadata": {"_uuid": "e913fe73fbbd845d86a1f39725f106b1e9f1494b", "_cell_guid": "8a4abe3f-bd79-4083-b5da-a84f03018598"}}, {"outputs": [], "source": ["#create an array of even space between the given range of values\n", "# Get the 5 values from 1 to 2 \n", "np.linspace(1,2,5)"], "execution_count": null, "cell_type": "code", "metadata": {"_uuid": "933dc5c793bbe6660986f36a175f6ca795001cf3", "_cell_guid": "47700b18-ba88-49a2-bff0-545795230847"}}, {"outputs": [], "source": ["#create a 3x3 array with mean 0 and standard deviation 1 in a given dimension\n", "# Usuall Normal distribution will have mean 0 and Standard deviation 1. thats why using normal function here\n", "np.random.normal(0,1,(3,3))"], "execution_count": null, "cell_type": "code", "metadata": {"_uuid": "285dd45b2d195d2d752129200189ffdaaafc0da2", "_cell_guid": "61a5744a-7d8d-40a7-bb62-bbe5431b63f0"}}, {"outputs": [], "source": ["# create an identity matrix\n", "# Usually we call a matrix whose values are 1 in daignols as idempotent matrix. so using 'eye' method here\n", "np.eye(3)"], "execution_count": null, "cell_type": "code", "metadata": {"_uuid": "35bfd2a3d8c96a78d7d8be52944b4dea8236bbfb", "_cell_guid": "b98a39b2-8407-4656-ae1c-9d2e41b4f6d2"}}, {"outputs": [], "source": ["#Random seed\n", "#If we do not set random seed, every time we run random.rand will give different values\n", "np.random.rand(5)"], "execution_count": null, "cell_type": "code", "metadata": {"_uuid": "36e289d561c81bf21f99833405f61ba91c72cdb0", "_cell_guid": "988d5c9f-0e93-4195-af46-b67d6e107af0"}}, {"outputs": [], "source": ["np.random.rand(5)"], "execution_count": null, "cell_type": "code", "metadata": {"_uuid": "9e0cf425f98b80ded5eb9854f3d6dfe711ad60f8", "_cell_guid": "5af649d2-cdd7-46fc-a0a0-64e44500f3ad"}}, {"outputs": [], "source": ["# If we set random seed, the random values are always same.\n", "np.random.seed(0)\n", "np.random.rand(5)\n"], "execution_count": null, "cell_type": "code", "metadata": {"_uuid": "a6c6fd3f53a0cfa553d0f1fe78b0c3322efa7e7e", "_cell_guid": "c2c481c3-6143-4ad7-a6c8-a18ae8410469"}}, {"outputs": [], "source": ["np.random.seed(0)\n", "np.random.rand(5)"], "execution_count": null, "cell_type": "code", "metadata": {"_uuid": "18d71d307010e04c33a8df11c22e957d40c237cd", "_cell_guid": "89239021-995d-4300-8708-c7cf564a3f50"}}, {"source": ["**Array Indexing**\n", "\n", "Indexing in python starts at zero."], "cell_type": "markdown", "metadata": {"_uuid": "da05a36ec40c75ff6c71a7e6492066d515b84d00", "_cell_guid": "60bd8c19-bb4c-4514-9bfe-3aff57d0099a"}}, {"outputs": [], "source": ["a = np.array([1,2,3,4,5,6,7,89,9])"], "execution_count": null, "cell_type": "code", "metadata": {"collapsed": true, "_uuid": "d4490c814693b72874d4504dabb28f03b18a78b1", "_cell_guid": "42f2e913-e9ab-4e0a-bf0f-2142bfa7acfe"}}, {"outputs": [], "source": ["# accessing array elements\n", "a[2]"], "execution_count": null, "cell_type": "code", "metadata": {"_uuid": "40c6e8742ab9de3d726821a8b9662a8174af10f9", "_cell_guid": "6d30518d-4fa8-4837-a772-a711190e0d52"}}, {"outputs": [], "source": ["# This is called slicing\n", "# [start range : end rage] here end range is exclude. i.e [start range : (end range - 1)] \n", "# Get values from 1st index to 7th index\n", "a[1:8]"], "execution_count": null, "cell_type": "code", "metadata": {"_uuid": "3caaef90d6d1788c95ee5ccaaa8719acc8d12b41", "_cell_guid": "6bab5e5c-2fcb-4b59-90fb-41cb7bf9b205"}}, {"outputs": [], "source": ["# from indexing 1 to all\n", "a[1:]"], "execution_count": null, "cell_type": "code", "metadata": {"_uuid": "eb9a747072b89ea44e82ed6a046f2a9729280a7c", "_cell_guid": "650c55a9-0d91-4bb5-af8b-b925ddda29e7"}}, {"outputs": [], "source": ["# to get last element\n", "a[-1]"], "execution_count": null, "cell_type": "code", "metadata": {"_uuid": "443820359120274c212988f039950707db80b597", "_cell_guid": "fa5021b6-a5c4-41cc-befb-d52b3bce5dec"}}, {"outputs": [], "source": ["print(a)"], "execution_count": null, "cell_type": "code", "metadata": {}}, {"outputs": [], "source": ["# print all elements. it is same as print(a)\n", "print(a[:])"], "execution_count": null, "cell_type": "code", "metadata": {}}, {"outputs": [], "source": ["# np.arange(1,10) will generate values from start range to (end range -1)\n", "arr = np.arange(1,10).reshape(3,3)"], "execution_count": null, "cell_type": "code", "metadata": {"collapsed": true, "_uuid": "f8f4f673f22ed2adbeaa66189be9a0e4f295ac92", "_cell_guid": "74856058-09eb-4d95-a240-c0c3ffb33bb7"}}, {"outputs": [], "source": ["# get all elements\n", "arr[:]"], "execution_count": null, "cell_type": "code", "metadata": {"_uuid": "f2c09681cd385ad6444ffcb50a56ecdf6c651c8e", "_cell_guid": "50f5f95d-be63-48fe-97e5-e97eaa3ba7d0"}}, {"outputs": [], "source": ["\n", "# [row_index_start : row_index_end,  column_index_start : column_index_end]\n", "# get all values starting from 1st row\n", "arr[1:]"], "execution_count": null, "cell_type": "code", "metadata": {"_uuid": "56755b7e66e17f7a62f844642716b8932bda2ebc", "_cell_guid": "02fc5b2f-c2c0-4563-a257-8bace218976b"}}, {"outputs": [], "source": ["# Get the values from 0 column and 1 st column of 0 and 1st row\n", "# i.e, [(0,0) (0,1)\n", "#      (1,0) (1,1)]\n", "\n", "arr[0:2, 0:2]"], "execution_count": null, "cell_type": "code", "metadata": {"_uuid": "b3b472d4e7189e3aa1fb4312ff6b5534221ebafa", "_cell_guid": "b661f3e3-0b11-49f7-8444-d4f195a7e595"}}, {"outputs": [], "source": ["# Get all the rows from 0 index to 1 index\n", "arr[0:2]"], "execution_count": null, "cell_type": "code", "metadata": {"_uuid": "9617c9f7e0a88ca8904298be6d55c63a7ad2b0c6", "_cell_guid": "fbb74921-8107-4051-9068-c7ebc8ba6c4c"}}, {"outputs": [], "source": ["## Get 2nd row of 2nd column value\n", "arr[2,2]"], "execution_count": null, "cell_type": "code", "metadata": {"_uuid": "a95a39a5ece0ac8314c94c163a5e0c28d9524c60", "_cell_guid": "7b34b7b1-d609-4d08-a0ed-1017e33644ca"}}, {"outputs": [], "source": ["# 1st row last value\n", "arr[1,-1]"], "execution_count": null, "cell_type": "code", "metadata": {"_uuid": "4bd28ec067ddf5bfa69718ecf6d588d629fee4a1", "_cell_guid": "1ad13e5e-28a7-497d-9c6e-36a80648f8cb"}}, {"outputs": [], "source": ["# transpose means reverse the matrix\n", "# i.e 2x3 after transpose it will change to 3x2\n", "arr.transpose()"], "execution_count": null, "cell_type": "code", "metadata": {"_uuid": "8d3cb69feaba5b23d8977d2bd17875513129b1ec", "_cell_guid": "1c8e20d4-11d7-479d-963c-422a7c55d22f"}}, {"outputs": [], "source": ["# it is same as transpose matrix\n", "arr[::-1]"], "execution_count": null, "cell_type": "code", "metadata": {"_uuid": "19e18820446469593f8784b542bd41cd46289893", "_cell_guid": "c1bd4f01-e7af-400c-817d-0c29ce51ce84"}}, {"outputs": [], "source": ["# Concatinating multiple arraya using cancatenate method\n", "x = np.array([1,2,3,4,5,6])\n", "y = np.array([6,5,4,3,2,1])\n", "\n", "np.concatenate([x,y])"], "execution_count": null, "cell_type": "code", "metadata": {"_uuid": "fea830f04489e9cf0bde2d641fadaf5a1ea8f7e1", "_cell_guid": "f115c556-6722-46fa-87be-7749330fc05f"}}, {"outputs": [], "source": ["# vstack means it will add the array in the form of vertical. i.e row wise\n", "z = [11,22,33,44,55,66]\n", "np.vstack([x,y,z])"], "execution_count": null, "cell_type": "code", "metadata": {"_uuid": "90e2fb79ab269a10c507a45abaf846a37e4f4b21", "_cell_guid": "ef92d223-85f4-49b4-84e6-4f67c6c3e402"}}, {"outputs": [], "source": ["# hstack will add the values horizontally. i.e column wise\n", "k = np.concatenate([x,y])\n", "print(type(k))\n", "a = np.array([11,22])\n", "print(np.hstack([k,a]))"], "execution_count": null, "cell_type": "code", "metadata": {"_uuid": "4471d333caf5518e1dd60b54b57118aa7d18dc09", "_cell_guid": "3ad5801f-f647-472b-a23e-95d286e0d309"}}, {"outputs": [], "source": ["r = np.arange(1,11)"], "execution_count": null, "cell_type": "code", "metadata": {"collapsed": true, "_uuid": "d27ae44ae362bfb2be6aa65f9db1b21fb2bcfc8d", "_cell_guid": "2ddfdeff-9a80-4099-a004-a35dcc93a586"}}, {"outputs": [], "source": ["# Devide array r as multiple parts having min 1 element and max 7 elements\n", "np.split(r,[1,7])"], "execution_count": null, "cell_type": "code", "metadata": {"_uuid": "01432f7995a850ed3ee4cfee468a558677422678", "_cell_guid": "0852e62b-2022-49c7-aff1-3b9e04228ece"}}, {"outputs": [], "source": ["# reshape is used to form a matrix with the given rows and columns\n", "grid = np.arange(16).reshape((4,4))\n", "grid"], "execution_count": null, "cell_type": "code", "metadata": {"_uuid": "38f0d5c57143b165dfd3349f489c6dc52bc20ec9", "_cell_guid": "ef71a9b8-2102-4662-8e4b-d9c8d1d40bc3"}}, {"outputs": [], "source": ["# vsplit is used to split the values rows wise\n", "upper, lower = np.vsplit(grid,2)\n", "print (upper)\n", "print (lower)"], "execution_count": null, "cell_type": "code", "metadata": {"_uuid": "6d812353259f23c28ba6d85e9695390e65224406", "_cell_guid": "31c6a0c8-75ca-4b04-ad41-5c739fd1601a"}}, {"outputs": [], "source": ["# vsplit is used to split the values column wise\n", "hupper, hlower = np.hsplit(grid,2)\n", "print (hupper)\n", "print ( hlower)"], "execution_count": null, "cell_type": "code", "metadata": {"_uuid": "72e1305051d7bb794db1209c6b404e02fa06f389", "_cell_guid": "919123ee-669a-4eb9-b672-5afa9a279d92"}}, {"outputs": [], "source": ["# here it prints the values like (0,0) (1,1) (2,0)\n", "xx = np.array([[1, 2], [3, 4], [5, 6]]) \n", "print(xx)\n", "yy = xx[[0,1,2], [0,1,0]] \n", "print(yy)"], "execution_count": null, "cell_type": "code", "metadata": {"_uuid": "e7a74a74e5e060a494c9d22d3b95062f9123a22b", "_cell_guid": "7a203920-0209-4b02-a685-5971455a71a2"}}, {"outputs": [], "source": [], "execution_count": null, "cell_type": "code", "metadata": {"collapsed": true}}]}