{
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "b3d1c558-d6c7-423f-ad07-f16b929cf555"
      },
      "outputs": [],
      "source": [
        "##################################################################\n",
        "## Work In Progress\n",
        "##################################################################\n",
        "\n",
        "# This Python 3 environment comes with many helpful analytics libraries installed\n",
        "# It is defined by the kaggle/python docker image: https://github.com/kaggle/docker-python\n",
        "# For example, here's several helpful packages to load in \n",
        "\n",
        "\n",
        "from scipy.stats import friedmanchisquare\n",
        "import numpy as np # linear algebra\n",
        "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "import re\n",
        "\n",
        "# Input data files are available in the \"../input/\" directory.\n",
        "# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n",
        "\n",
        "from subprocess import check_output\n",
        "print(check_output([\"ls\", \"../input\"]).decode(\"utf8\"))\n",
        "\n",
        "# Any results you write to the current directory are saved as output."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "67c0c0bc-12f0-4283-92d5-bcab02452270"
      },
      "outputs": [],
      "source": [
        "def removeNotNeeded(string):\n",
        "    if (type(string) != str):\n",
        "        return string\n",
        "    else:\n",
        "        return re.sub(r'\\([^)]*\\)|[^a-zA-Z\\s0-9]+', '', string)\n",
        "    "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "8f9ecd1f-47bc-43a4-9072-d983a77148e9"
      },
      "outputs": [],
      "source": [
        "# Read the three primary datasets\n",
        "shanghai = pd.read_csv('../input/shanghaiData.csv')\n",
        "cwur = pd.read_csv('../input/cwurData.csv')\n",
        "times = pd.read_csv('../input/timesData.csv')\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "3820225c-4f33-4165-a291-e5263df3b6da"
      },
      "outputs": [],
      "source": [
        "# Make column names uniform all throughout\n",
        "shanghai = shanghai.rename(columns = {'total_score': 'score'})\n",
        "cwur = cwur.rename(columns = {'institution': 'university_name'#, 'score': 'score_cwur'\n",
        "                             })\n",
        "times = times.rename(columns = {'total_score': 'score'})\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "6489bd5b-83a5-4df7-9c80-bbf37daf3038"
      },
      "outputs": [],
      "source": [
        "# Filter year variable and include data only from 2012 onwards\n",
        "shang2012gre = shanghai[(shanghai.year >= 2012)]\n",
        "times2012gre = times[(times.year >= 2012)]\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "bddcf820-b4dd-4636-903b-81f81e225447"
      },
      "outputs": [],
      "source": [
        "# Get unique schools\n",
        "unishang = shang2012gre.university_name.unique()\n",
        "unitimes = times2012gre.university_name.unique()\n",
        "unicwur = cwur.university_name.unique()\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "a692d30a-ee93-462f-8c2e-29fe306f1735"
      },
      "outputs": [],
      "source": [
        "# Get common schools among the three WITHOUT cleaning university column\n",
        "communi = set(unicwur).intersection(unitimes).intersection(unishang)\n",
        "\n",
        "# Notice how some well-known schools, such as MIT, are missing from this dataset. \n",
        "# Further cleaning is needed to remedy it.\n",
        "# Making a working code that will cater to a dataset with the same\n",
        "# structure yet different values is what will try to achieve first."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "5f687625-930c-4112-abcf-6706446976ad"
      },
      "outputs": [],
      "source": [
        "filtshang = shang2012gre[shang2012gre['university_name'].isin(communi)]\n",
        "filttimes = times2012gre[times2012gre['university_name'].isin(communi)]\n",
        "filtcwur = cwur[cwur['university_name'].isin(communi)]\n",
        "\n",
        "smolshang = filtshang[[\"university_name\", \"score\", \"year\"]]\n",
        "smoltimes = filttimes[[\"university_name\", \"score\", \"year\"]]\n",
        "smolcwur = filtcwur[[\"university_name\", \"score\", \"year\"]]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "51049508-95bb-4ba3-a0de-ebf15d50c9cd"
      },
      "outputs": [],
      "source": [
        "# Year 2012 only\n",
        "shang2012 = smolshang[(smolshang.year == 2012)]\n",
        "times2012 = smoltimes[(smoltimes.year == 2012)]\n",
        "cwur2012 = smolcwur[(smolcwur.year == 2012)]\n",
        "\n",
        "shang2012 = shang2012[[\"university_name\", \"score\"]]\n",
        "times2012 = times2012[[\"university_name\", \"score\"]]\n",
        "cwur2012 = cwur2012[[\"university_name\", \"score\"]]\n",
        "\n",
        "shang2012['institution'] = \"shanghai\"\n",
        "times2012['institution'] = \"times\"\n",
        "cwur2012['institution'] = \"cwur\""
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "50461219-3a85-4c43-bb68-e9cc0c2d6b40"
      },
      "outputs": [],
      "source": [
        "all2012 = pd.concat([times2012, shang2012, cwur2012], ignore_index=True)\n",
        "\n",
        "print(all2012[:5]) #Check how the dataset looks like"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "bc669933-7693-40ec-aa4b-a788230d04ca"
      },
      "outputs": [],
      "source": [
        "all2012 = all2012.replace({'-': ''}, regex=True)\n",
        "all2012[['score']] = all2012[['score']].apply(lambda x: pd.to_numeric(x, errors='ignore'))\n",
        "all2012.dtypes\n",
        "#print(all2012['score_times'].unique())"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "6b646a83-246a-4a38-8243-1816a663b826"
      },
      "outputs": [],
      "source": [
        "all2012 = all2012.fillna(0)\n",
        "a2012 = all2012[all2012['score'] > 0]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "893df5b8-d181-4738-a944-6b46f7f7d027"
      },
      "outputs": [],
      "source": [
        "# We now have a dataset that do not have unscored universities."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "75d0b417-f896-4f34-80f7-d156606c68d0"
      },
      "outputs": [],
      "source": [
        "# We get only the universities who have ratings from the 3 institutions.\n",
        "s = a2012.groupby(['university_name']).transform('count')['score']\n",
        "a2012['count'] = pd.Series(s)\n",
        "a2012 = a2012[ a2012['count'] == 3 ]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "d4e1faf5-6ff4-4d38-94c1-8731c754b30c"
      },
      "outputs": [],
      "source": [
        "f, ax = plt.subplots(figsize=(8,80))\n",
        "sns.barplot(y='university_name', x=\"score\", hue=\"institution\", data=a2012, orient='h')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "8094300b-950e-4479-9234-c72b7c4bb754"
      },
      "outputs": [],
      "source": [
        "# Make a dataset that can be fed to scipy.stats function friedman\n",
        "\n",
        "shang2012 = smolshang[(smolshang.year == 2012)]\n",
        "times2012 = smoltimes[(smoltimes.year == 2012)]\n",
        "cwur2012 = smolcwur[(smolcwur.year == 2012)]\n",
        "\n",
        "shang2012 = shang2012[[\"university_name\", \"score\"]]\n",
        "times2012 = times2012[[\"university_name\", \"score\"]]\n",
        "cwur2012 = cwur2012[[\"university_name\", \"score\"]]\n",
        "\n",
        "shang2012 = shang2012.rename(columns = {'score' : 'score_shang'})\n",
        "cwur2012 = cwur2012.rename(columns = {'score': 'score_cwur'})                          \n",
        "times2012 = times2012.rename(columns = {'score': 'score_times'})\n",
        "\n",
        "part2012 = pd.merge(times2012, shang2012, on='university_name', how='outer')\n",
        "all2012 = pd.merge(part2012, cwur2012, on='university_name', how='outer')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "9fbf761f-b640-4bee-ba53-dc7f0815c6e0"
      },
      "outputs": [],
      "source": [
        "all2012 = all2012.replace({'-': ''}, regex=True)\n",
        "all2012[['score_times']] = all2012[['score_times']].apply(lambda x: pd.to_numeric(x, errors='ignore'))\n",
        "all2012 = all2012.fillna(0)\n",
        "a2012 = all2012[all2012[['score_shang', 'score_times', 'score_cwur']] > 0]\n",
        "a2012.dtypes"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "1d70af20-daa9-45a3-bc03-2b7937e02ab4"
      },
      "outputs": [],
      "source": [
        "print(friedmanchisquare(a2012[1, :], a2012[2, :], a2012[3, :]))\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "bd0b88eb-f30c-4521-b78e-071523e92164"
      },
      "outputs": [],
      "source": [
        ""
      ]
    }
  ],
  "metadata": {
    "_change_revision": 0,
    "_is_fork": false,
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.5.2"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}