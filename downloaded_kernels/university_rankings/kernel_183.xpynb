{
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "88cd2f6f-062b-617c-ce88-166b000bcb48"
      },
      "outputs": [],
      "source": [
        "# This Python 3 environment comes with many helpful analytics libraries installed\n",
        "# It is defined by the kaggle/python docker image: https://github.com/kaggle/docker-python\n",
        "# For example, here's several helpful packages to load in \n",
        "\n",
        "import numpy as np # linear algebra\n",
        "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
        "\n",
        "# Input data files are available in the \"../input/\" directory.\n",
        "# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n",
        "\n",
        "from subprocess import check_output\n",
        "print(check_output([\"ls\", \"../input\"]).decode(\"utf8\"))\n",
        "\n",
        "# Any results you write to the current directory are saved as output."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "ae6ee157-cb07-401c-8181-4c0e38772761"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import pandas as pd\n",
        "from matplotlib.ticker import NullFormatter\n",
        "\n",
        "# the random data\n",
        "x = pd.DataFrame(np.random.randn(100))\n",
        "y = pd.DataFrame(np.random.randn(100))\n",
        "\n",
        "nullfmt = NullFormatter()         # no labels\n",
        "\n",
        "# definitions for the axes\n",
        "left, width = 0.1, 0.65\n",
        "bottom, height = 0.1, 0.65\n",
        "bottom_h = left_h = left + width #+ 0.02\n",
        "\n",
        "rect_scatter = [left, bottom, width, height]\n",
        "rect_histx = [left, bottom_h, width, 0.2]\n",
        "rect_histy = [left_h, bottom, 0.2, height]\n",
        "\n",
        "# start with a rectangular Figure\n",
        "plt.figure(1, figsize=(10, 10))\n",
        "\n",
        "axScatter = plt.axes(rect_scatter)\n",
        "axHistx = plt.axes(rect_histx)\n",
        "axHisty = plt.axes(rect_histy)\n",
        "\n",
        "# no labels\n",
        "axHistx.xaxis.set_major_formatter(nullfmt)\n",
        "axHisty.yaxis.set_major_formatter(nullfmt)\n",
        "\n",
        "# the scatter plot:\n",
        "axScatter.scatter(x, y)\n",
        "\n",
        "# now determine nice limits by hand:\n",
        "binwidth = 0.25\n",
        "xymax = np.max([np.max(np.fabs(x)), np.max(np.fabs(y))])\n",
        "lim = (int(xymax/binwidth) + 1) * binwidth\n",
        "\n",
        "axScatter.set_xlim((-lim, lim))\n",
        "axScatter.set_ylim((-lim, lim))\n",
        "\n",
        "bins = np.arange(-lim, lim + binwidth, binwidth)\n",
        "axHistx.hist(x, bins=bins)\n",
        "axHisty.hist(y, bins=bins, orientation='horizontal')\n",
        "\n",
        "axHistx.set_xlim(axScatter.get_xlim())\n",
        "axHisty.set_ylim(axScatter.get_ylim())\n",
        "#print(x)\n",
        "#plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "c8c6f9ff-6c85-fbdb-2f7c-65a14eca3f45"
      },
      "outputs": [],
      "source": [
        ""
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "3744e589-93e5-819a-3e42-4f2f0af4a97e"
      },
      "outputs": [],
      "source": [
        "np.random.seed(1234)"
      ]
    }
  ],
  "metadata": {
    "_change_revision": 0,
    "_is_fork": false,
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.6.0"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}