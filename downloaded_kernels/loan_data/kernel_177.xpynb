{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "_cell_guid": "b8ef9801-2287-fb1b-1494-71c8f42b84b2"
      },
      "source": [
        ""
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "c572950e-20a0-7bf9-d1e0-2070eb05a5a1"
      },
      "outputs": [],
      "source": [
        ""
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "abdfb15f-433d-1635-0b8e-bc33f3acb541"
      },
      "outputs": [],
      "source": [
        "import seaborn as sns\n",
        "import numpy as np\n",
        "\n",
        "arr = np.random.rand(100)\n",
        "sns.kdeplot(arr)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "_cell_guid": "728ba6c3-a43c-305e-3ac3-0393056f5108"
      },
      "source": [
        "## Import statements"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "86aaec46-2fd9-7bff-17a3-78e02287bc47"
      },
      "outputs": [],
      "source": [
        "# This Python 3 environment comes with many helpful analytics libraries installed\n",
        "# It is defined by the kaggle/python docker image: https://github.com/kaggle/docker-python\n",
        "# For example, here's several helpful packages to load in \n",
        "\n",
        "import numpy as np # linear algebra\n",
        "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
        "\n",
        "# Input data files are available in the \"../input/\" directory.\n",
        "# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n",
        "\n",
        "from subprocess import check_output\n",
        "print(check_output([\"ls\", \"../input\"]).decode(\"utf8\"))\n",
        "\n",
        "# Any results you write to the current directory are saved as output.\n",
        "\n",
        "# %pylab inline\n",
        "pylab.rcParams['figure.figsize'] = (16, 10)\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "\n",
        "from colorama import Fore, Back, Style\n",
        "from colorama import init\n",
        "init()\n",
        "\n",
        "from palettable.colorbrewer.qualitative import Accent_8 as palette"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "_cell_guid": "f1192d2c-dd01-3cbe-dce7-2175ec9cb1c3"
      },
      "source": [
        "## Functions"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "23faa14d-e23e-f348-290b-45c3ba1f38e1"
      },
      "outputs": [],
      "source": [
        "def make_palette(palette):\n",
        "    colors = palette.colors[:]\n",
        "    for i, color in enumerate(colors):\n",
        "        colors[i] = [x / 255.0 for x in color]\n",
        "    return iter(colors)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "f027f664-4e3f-fe6b-f227-70ad24f6b157"
      },
      "outputs": [],
      "source": [
        "def hist_by_groups(df_grouped, column):\n",
        "    cols = make_palette(palette)\n",
        "    for group_name, group in df_grouped:\n",
        "        sns.kdeplot(group[column], label=group_name, color=cols.__next__())\n",
        "    plt.legend();"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "_cell_guid": "70d92ef2-303e-0ac1-817f-428b0e622643"
      },
      "source": [
        "## Get data"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "77f48189-7a04-8ff1-42a0-0fa996b20f88"
      },
      "outputs": [],
      "source": [
        "ld = pd.read_csv('../input/loan.csv')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "16080bcb-d92a-df55-bc22-c92e2e28350d"
      },
      "outputs": [],
      "source": [
        "init()\n",
        "print('\\033[31m' + 'some red text')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "46d64f1c-491c-bf49-ac5a-57baf5986086"
      },
      "outputs": [],
      "source": [
        "init()\n",
        "for col in sorted(ld.columns):\n",
        "    if(ld[col].dtype == np.float64 or ld[col].dtype == np.int64):\n",
        "          print(Fore.RED + col)\n",
        "    else:\n",
        "          print(Fore.BLUE + col)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "_cell_guid": "5120e378-0385-2bd0-ace3-30c8716f277c"
      },
      "source": [
        "## Simple visualisations"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "e0961798-8c8d-76bf-5c03-2a10ccac726d"
      },
      "outputs": [],
      "source": [
        "# Failing with:\n",
        "# TypeError: slice indices must be integers or None or have an __index__ method\n",
        "# https://github.com/mwaskom/seaborn/issues/1092\n",
        "hist_by_groups(ld.groupby(\"grade\"), 'loan_amnt')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "382d9360-2221-49f0-561e-a2c103609dac"
      },
      "outputs": [],
      "source": [
        "hist_by_groups(ld.groupby(\"grade\"), 'avg_cur_bal')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "4174f2ab-7a7a-3a71-1a02-07010a9dfc17"
      },
      "outputs": [],
      "source": [
        ""
      ]
    }
  ],
  "metadata": {
    "_change_revision": 0,
    "_is_fork": false,
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.6.0"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}