{
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "5f8a61a1-f0fc-0148-3abf-912eb2d9baec"
      },
      "outputs": [],
      "source": [
        "# Imports:\n",
        "import matplotlib.pyplot as plt\n",
        "%matplotlib inline\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import sqlite3 as sql\n",
        "# import seaborn as sns"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "8308e47c-dfae-56b5-d3c2-18ef05603473"
      },
      "outputs": [],
      "source": [
        "# Connect to database and pull in raw data\n",
        "db_con = sql.connect('../input/database.sqlite')\n",
        "data = pd.read_sql_query('SELECT * FROM loan', db_con)\n",
        "\n",
        "# Print Sample\n",
        "print(data.head())"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "06003866-f685-63bb-4200-e22079c55aa1"
      },
      "outputs": [],
      "source": [
        "# Clean the raw data\n",
        "\n",
        "# Remove any non-ASCII special characters\n",
        "data.replace({r'[^\\x00-\\x7F]+':''}, regex=True, inplace=True)\n",
        "\n",
        "# To ensure that a 'loan_status' value is available for each row, we get the totals of rows with/ without the status value:\n",
        "print('Out of {} rows, {} have a status, and {} do not'.format(len(data['loan_status']),\n",
        "                                                             data['loan_status'].notnull().sum(),\n",
        "                                                             data['loan_status'].isnull().sum()))\n",
        "\n",
        "# Remove rows with no 'loan_status'\n",
        "data = data[data.loan_status.notnull()]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "486d3942-f131-3b5c-f32e-da8ecc3708c6"
      },
      "outputs": [],
      "source": [
        "# View overall performance of all loans\n",
        "funded_amnt = data['funded_amnt'].sum() # Amt. issued to borrower\n",
        "total_pymnt = data['total_pymnt'].sum() # Payments received to date for total amount funded\n",
        "out_prncp = data['out_prncp'].sum() # Remaining outstanding principal\n",
        "recoveries = data['recoveries'].sum() # post charge off gross recovery\n",
        "\n",
        "# We will be using the following data to find correlation with defaults:\n",
        "'''\n",
        "loan_amnt\n",
        "total_bal_il\n",
        "revol_bal\n",
        "grade\n",
        "delinq_2yrs\n",
        "average of: fico_range_high, fico_range_low\n",
        "\n",
        "'''"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "6247c753-b6eb-d621-cb5e-88e7bc92846e"
      },
      "outputs": [],
      "source": [
        "data[['loan_amnt', 'loan_status']]\n",
        "x = data['loan_amnt']\n",
        "print(x)\n",
        "y = range(int(x))\n",
        "plt.ylabel('Default %')\n",
        "plt.xlabel('Loan Amount ($)')\n",
        "plt.scatter(x,y)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "d47b8805-28ad-8c58-1a1c-535617dbd4d8"
      },
      "outputs": [],
      "source": [
        "ts = pd.Series(np.random.randn(1000), index=pd.date_range('1/1/2000', periods=1000))\n",
        "\n",
        "ts = ts.cumsum()\n",
        "\n",
        "ts.plot()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "e5d39ff2-dcc6-eeb0-8a6a-2bc46c2d22a5"
      },
      "outputs": [],
      "source": [
        "x = data.groupby(data.loan_status)\n",
        "z = (x['loan_status'].count())\n",
        "print(z.sum())\n",
        "print(z['Charged Off'])"
      ]
    }
  ],
  "metadata": {
    "_change_revision": 0,
    "_is_fork": false,
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.5.2"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}