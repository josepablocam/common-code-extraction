{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "_cell_guid": "74d1f51b-137a-410d-2e7c-d91e98782aea"
      },
      "source": [
        "# This is a replication of a prior notebook because of an error that occurred through when using plotly that could only be solved by creating a new notebook.\n",
        " "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "5adc958b-402f-de36-5283-c0ea67ab9502"
      },
      "outputs": [],
      "source": [
        "#%matplotlib inline\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import itertools\n",
        "from sklearn import preprocessing\n",
        "import matplotlib.pyplot as plt \n",
        "df = pd.read_csv(\"../input/loan.csv\", low_memory=False)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "0e581016-f6c1-3d4d-4dea-39e10357e5f3"
      },
      "outputs": [],
      "source": [
        "# First create a list of all states in the state column\n",
        "State_List = []\n",
        "for x in df['addr_state']:\n",
        "    if x not in State_List:\n",
        "        State_List.append(x)\n",
        "print (len(State_List))\n",
        "print (State_List) # Looks like Washington DC is the 51st"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "cd0a41b1-1368-03b1-bedc-a11316e329ac"
      },
      "outputs": [],
      "source": [
        "# Now create a dictionary with the states as keys and the sum of loans as values\n",
        "State_Dict = {}\n",
        "for x in State_List:\n",
        "    new_df = df[df['addr_state'] == x]\n",
        "    Loan_Sum = sum(new_df['funded_amnt'])\n",
        "    #print (\"State\",x,\"Loan Sum\",Loan_Sum)\n",
        "    State_Dict[x] = Loan_Sum # Add the value to the dictionary"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "58d38a02-1576-1981-56ff-ebe209831781"
      },
      "outputs": [],
      "source": [
        "import matplotlib.pyplot as plt\n",
        "plt.figure(figsize=(8, 5))\n",
        "plt.bar(range(len(State_Dict)), State_Dict.values(), align='center', width=0.9)\n",
        "plt.xticks(range(len(State_Dict)), State_Dict.keys(),rotation='vertical')\n",
        "plt.title(\"Loan Book By State\")\n",
        "plt.xlabel(\"States\")\n",
        "plt.ylabel(\"Total Value of Loans Funded\")\n",
        "plt.show()\n",
        "\n",
        "# Future - Add some color\n",
        "# Future - Add some padding between the bars"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "92aba7dd-763d-bbb9-6fb6-c666ba3e02f6"
      },
      "outputs": [],
      "source": [
        "# Testing basemap in this cell, will try plotly next\n",
        "import matplotlib.pyplot as plt\n",
        "%matplotlib inline\n",
        "from mpl_toolkits.basemap import Basemap\n",
        "m = Basemap(projection='mill',\n",
        "           llcrnrlat = 24,\n",
        "           llcrnrlon = -130,\n",
        "           urcrnrlat = 50,\n",
        "           urcrnrlon = -60,\n",
        "           resolution = 'l')\n",
        "\n",
        "m.drawcoastlines()\n",
        "m.drawcountries(linewidth=0.35)\n",
        "m.drawstates(color='b')\n",
        "\n",
        "# Some other fun stuff for later\n",
        "#m.drawcounties(color='darkred')\n",
        "#m.bluemarble()\n",
        "#m.etopo()\n",
        "#m.fillcontinents()\n",
        "\n",
        "plt.show()\n",
        "\n",
        "# Later use the data in State_Dict to populate colors (heat map style) in each state"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "2b6476bf-5fc7-b978-d3c7-7ca9e4f5bd01"
      },
      "outputs": [],
      "source": [
        "# Imports from plotly - Delete unused later\n",
        "import plotly.plotly as py\n",
        "import plotly.graph_objs as go\n",
        "from plotly import tools\n",
        "#from plotly.offline import iplot, init_notebook_mode\n",
        "from plotly.offline import iplot, init_notebook_mode, plot\n",
        "#from plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot # from docs\n",
        "#init_notebook_mode() # from Abigail's notebook\n",
        "init_notebook_mode(connected=True) # from docs\n",
        "#iplot([{\"x\": [1, 2, 3], \"y\": [3, 1, 6]}]) # Testing if it works\n",
        "plot([{\"x\": [1, 2, 3], \"y\": [3, 1, 6]}]) # this should just return a local html file"
      ]
    }
  ],
  "metadata": {
    "_change_revision": 0,
    "_is_fork": false,
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.5.2"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}