{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "_cell_guid": "270cc1d3-e556-ec97-3501-cd970ae5446f"
      },
      "source": [
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "d99afc50-86f4-56c3-6e71-483f739fc1c4"
      },
      "outputs": [],
      "source": [
        "#%matplotlib inline\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import itertools\n",
        "from sklearn import preprocessing\n",
        "import matplotlib.pyplot as plt \n",
        "df = pd.read_csv(\"../input/loan.csv\", low_memory=False)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "0dabc88e-c6db-81b8-87e0-7d25761d2f38"
      },
      "outputs": [],
      "source": [
        "# First create a list of all states in the state column\n",
        "State_List = []\n",
        "for x in df['addr_state']:\n",
        "    if x not in State_List:\n",
        "        State_List.append(x)\n",
        "print (len(State_List))\n",
        "print (State_List) # Looks like Washington DC is the 51st"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "602367ec-ac05-7e33-24a5-cd4656f47acf"
      },
      "outputs": [],
      "source": [
        "# Now create a dictionary with the states as keys and the sum of loans as values\n",
        "State_Dict = {}\n",
        "for x in State_List:\n",
        "    new_df = df[df['addr_state'] == x]\n",
        "    Loan_Sum = sum(new_df['funded_amnt'])\n",
        "    #print (\"State\",x,\"Loan Sum\",Loan_Sum)\n",
        "    State_Dict[x] = Loan_Sum # Add the value to the dictionary"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "89b743f4-a287-4226-99cb-cd0c238e87c5"
      },
      "outputs": [],
      "source": [
        "import matplotlib.pyplot as plt\n",
        "plt.figure(figsize=(8, 5))\n",
        "plt.bar(range(len(State_Dict)), State_Dict.values(), align='center', width=0.9)\n",
        "plt.xticks(range(len(State_Dict)), State_Dict.keys(),rotation='vertical')\n",
        "plt.title(\"Loan Book By State\")\n",
        "plt.xlabel(\"States\")\n",
        "plt.ylabel(\"Total Value of Loans Funded\")\n",
        "plt.show()\n",
        "\n",
        "# Future - Add some color\n",
        "# Future - Add some padding between the bars"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "a415d7a5-7bf3-7af3-4a53-ddf96daaa513"
      },
      "outputs": [],
      "source": [
        "# Testing basemap in this cell, will try plotly next\n",
        "import matplotlib.pyplot as plt\n",
        "#%matplotlib inline\n",
        "from mpl_toolkits.basemap import Basemap\n",
        "m = Basemap(projection='mill',\n",
        "           llcrnrlat = 24,\n",
        "           llcrnrlon = -130,\n",
        "           urcrnrlat = 50,\n",
        "           urcrnrlon = -60,\n",
        "           resolution = 'l')\n",
        "\n",
        "m.drawcoastlines()\n",
        "m.drawcountries(linewidth=0.35)\n",
        "m.drawstates(color='b')\n",
        "\n",
        "# Some other fun stuff for later\n",
        "#m.drawcounties(color='darkred')\n",
        "#m.bluemarble()\n",
        "#m.etopo()\n",
        "#m.fillcontinents()\n",
        "\n",
        "plt.show()\n",
        "\n",
        "# Later use the data in State_Dict to populate colors (heat map style) in each state"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "81e5e862-33f3-925a-caa4-782efb757746"
      },
      "outputs": [],
      "source": [
        "# Imports from plotly - Delete unused later\n",
        "import plotly.plotly as py\n",
        "import plotly.graph_objs as go\n",
        "from plotly import tools\n",
        "#from plotly.offline import iplot, init_notebook_mode, plot\n",
        "from plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\n",
        "#init_notebook_mode()\n",
        "init_notebook_mode(connected=True) \n",
        "#iplot([{\"x\": [1, 2, 3], \"y\": [3, 1, 6]}])\n",
        "#plot([{\"x\": [1, 2, 3], \"y\": [3, 1, 6]}])\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "7e2600e0-76aa-1417-d2eb-a7af85f8a073"
      },
      "outputs": [],
      "source": [
        "plot([{\"x\": [1, 2, 3], \"y\": [3, 1, 6]}])"
      ]
    }
  ],
  "metadata": {
    "_change_revision": 0,
    "_is_fork": false,
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.5.2"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}